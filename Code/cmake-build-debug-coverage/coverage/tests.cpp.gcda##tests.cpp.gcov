        -:    0:Source:D:/Facultate/An1/Sem2/SDA/SDA_Lab1_TAD_Vector_Dinamic/Code/tests.cpp
        -:    0:Graph:D:\Facultate\An1\Sem2\SDA\SDA_Lab1_TAD_Vector_Dinamic\Code\cmake-build-debug-coverage\CMakeFiles\Code.dir\tests.cpp.gcno
        -:    0:Data:D:\Facultate\An1\Sem2\SDA\SDA_Lab1_TAD_Vector_Dinamic\Code\cmake-build-debug-coverage\CMakeFiles\Code.dir\tests.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by irchit on 3/30/2023.
        -:    3://
        -:    4:
        -:    5:#include "tests.h"
        -:    6:using namespace std;
        -:    7:
function _Z9testScurtv called 1 returned 100% blocks executed 69%
        1:    8:void testScurt()
        -:    9:{
        -:   10:    //apelam fiecare functie sa vedem daca exista
        1:   11:    VectorDinamic v(4);
        1:   11-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   12:    assert(v.dim() == 0); //adaug niste elemente
        1:   12-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   12-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   12-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   12-block  3
    %%%%%:   12-block  4
        1:   13:    v.adaugaSfarsit(5);
        1:   13-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   14:    v.adauga(1,1);
        1:   14-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   15:    v.adauga(0,10);
        1:   15-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16:    v.adauga(1,7);
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17:    v.adauga(1,1);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   18:    v.adauga(1,11);
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19:    v.adauga(1,-3);
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   20:    assert(v.dim() == 7);
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   20-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   20-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   20-block  3
    %%%%%:   20-block  4
       1*:   21:    assert(v.sterge(1) == -3);
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   21-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   21-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   21-block  3
    %%%%%:   21-block  4
       1*:   22:    assert(v.sterge(4) == 5);
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   22-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   22-block  3
    %%%%%:   22-block  4
       1*:   23:    assert(v.dim() == 5);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   23-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   23-block  3
    %%%%%:   23-block  4
       1*:   24:    assert(v.modifica(0,7) == 10);
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   24-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   24-block  3
    %%%%%:   24-block  4
       1*:   25:    assert(v.dim() == 5);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   25-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   25-block  3
    %%%%%:   25-block  4
        1:   26:    IteratorVectorDinamic iv = v.iterator();
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27:    int vals[]={7,11,1,7,1};
        1:   28:    iv.prim();
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29:    int k=0;
        6:   30:    while (iv.valid()) {
        1:   30-block  0
        6:   30-block  1
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   30-block  2
branch  3 taken 5
branch  4 taken 1 (fallthrough)
        5:   31:        TElem e = iv.element();
        5:   31-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
       5*:   32:        assert(e==vals[k++]);
        5:   32-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:   32-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        5:   32-block  2
    %%%%%:   32-block  3
        5:   33:        iv.urmator();
        5:   33-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   34:    }
        1:   35:}
        1:   35-block  0
call    0 returned 1
    $$$$$:   35-block  1
call    1 never executed
        -:   36:
function _Z11testCreeazav called 1 returned 100% blocks executed 65%
        1:   37:void testCreeaza() {
        1:   38:    VectorDinamic v(10);
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   39:    assert(v.dim() == 0);
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   39-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   39-block  3
    %%%%%:   39-block  4
        1:   40:    IteratorVectorDinamic iv = v.iterator(); //iterator pe vectorul vid ar trebui sa fie invalid din start
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   41:    assert(iv.valid() == false);
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   41-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   41-block  3
    %%%%%:   41-block  4
        1:   42:}
        1:   42-block  0
call    0 returned 1
    $$$$$:   42-block  1
call    1 never executed
        -:   43:
function _Z10testAdaugav called 1 returned 100% blocks executed 80%
        1:   44:void testAdauga() {
        1:   45:    VectorDinamic v(5); //adaugam elementele [0, 4]
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:   46:    for (int i = 0; i < 5; i++) {
        1:   46-block  0
        5:   46-block  1
        6:   46-block  2
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   47:        v.adaugaSfarsit(i);
        5:   47-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   48:    }
        -:   49:    //adaugam la sfarsit 5,6,7
        1:   50:    v.adauga(v.dim(),5);
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   51:    v.adauga(v.dim(),6);
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   52:    v.adauga(v.dim(),7);
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*:   53:    assert(v.dim() == 8);
        1:   53-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   53-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   53-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   53-block  3
    %%%%%:   53-block  4
        -:   54:    //vectorul este 0,1,2,3,4,5,6,7
        1:   55:    v.adauga(0,10);
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   56:    v.adauga(1,11);
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:    v.adauga(2,12);
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   58:    v.modifica(v.dim()-1,9);
        1:   58-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   58-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:   59:    //vectorul este 10,11,12,0,1,2,3,4,5,6,9
       1*:   60:    assert(v.dim() == 11);
        1:   60-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   60-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   60-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   60-block  3
    %%%%%:   60-block  4
        1:   61:    int vals[]={10,11,12,0,1,2,3,4,5,6,9};
        -:   62:    //test iterator
        1:   63:    IteratorVectorDinamic iv = v.iterator();
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64:    iv.prim();
        1:   64-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   65:    int k = 0;
       12:   66:    while(iv.valid()){
        1:   66-block  0
       12:   66-block  1
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   66-block  2
branch  3 taken 11
branch  4 taken 1 (fallthrough)
       11:   67:        TElem e = iv.element();
       11:   67-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
      11*:   68:        assert(e == vals[k]);
       11:   68-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%:   68-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
       11:   68-block  2
    %%%%%:   68-block  3
       11:   69:        k++;
       11:   70:        iv.urmator();
       11:   70-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:   71:    }
        -:   72:    //test parcurgere
       12:   73:    for(int i = 0; i < v.dim(); i++){
        1:   73-block  0
       11:   73-block  1
       12:   73-block  2
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   73-block  3
branch  3 taken 11
branch  4 taken 1 (fallthrough)
       11:   74:        TElem e = v.element(i);
       11:   74-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
      11*:   75:        assert(e == vals[i]);
       11:   75-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 11
    %%%%%:   75-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
       11:   75-block  2
    %%%%%:   75-block  3
        -:   76:    }
        1:   77:}
        1:   77-block  0
call    0 returned 1
    $$$$$:   77-block  1
call    1 never executed
        -:   78:
function _Z10testStergev called 1 returned 100% blocks executed 78%
        1:   79:void testSterge() {
        1:   80:    VectorDinamic v(20);
        1:   80-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
      101:   81:    for (int i = -100; i < 100; i = i + 2) { //adaugam elemente din 2 in 2 (numere pare)
        1:   81-block  0
      100:   81-block  1
      101:   81-block  2
branch  0 taken 100
branch  1 taken 1 (fallthrough)
      100:   82:        v.adaugaSfarsit(i);
      100:   82-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:   83:    }
       1*:   84:    assert(v.dim() == 100);
        1:   84-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   84-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   84-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   84-block  3
    %%%%%:   84-block  4
        1:   85:    int val = 98;
      101:   86:    for (int i = 0; i < 100; i++) { //stergem elementele
        1:   86-block  0
      101:   86-block  1
branch  0 taken 100
branch  1 taken 1 (fallthrough)
     100*:   87:        assert(v.sterge(v.dim()-1) == val);
      100:   87-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   87-block  1
call    3 returned 100
branch  4 taken 100 (fallthrough)
branch  5 taken 0 (throw)
      100:   87-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 100
    %%%%%:   87-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
      100:   87-block  4
    %%%%%:   87-block  5
      100:   88:        val -= 2;
      100:   88-block  0
        -:   89:    }
       1*:   90:    assert(v.dim() == 0);
        1:   90-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   90-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   90-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   90-block  3
    %%%%%:   90-block  4
      102:   91:    for (int i = -100; i <= 100; i = i + 2) { //adaugam elemente din 2 in 2
        1:   91-block  0
      101:   91-block  1
      102:   91-block  2
branch  0 taken 101
branch  1 taken 1 (fallthrough)
      101:   92:        v.adaugaSfarsit(i);
      101:   92-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
        -:   93:    }
        -:   94:    //stergem elementul de la final
       1*:   95:    assert(v.sterge(v.dim() - 1) == 100);
        1:   95-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   95-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   95-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:   95-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
        1:   95-block  4
    %%%%%:   95-block  5
       1*:   96:    assert(v.dim() == 100);
        1:   96-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   96-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   96-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   96-block  3
    %%%%%:   96-block  4
        -:   97:    //stergem toate elementele
        1:   98:    val = -100;
      101:   99:    for (int i = 0; i < 100; i++){
        1:   99-block  0
      101:   99-block  1
branch  0 taken 100
branch  1 taken 1 (fallthrough)
     100*:  100:        assert(v.sterge(0) == val);
      100:  100-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  100-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  100-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
      100:  100-block  3
    %%%%%:  100-block  4
      100:  101:        val += 2;
      100:  101-block  0
        -:  102:    }
        -:  103:    //vectorul e vid
       1*:  104:    assert(v.dim() == 0);
        1:  104-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  104-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  104-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  104-block  3
    %%%%%:  104-block  4
      202:  105:    for (int i = -100; i <= 100; i++) { //adaugam elemente de la -100 la 100
        1:  105-block  0
      201:  105-block  1
      202:  105-block  2
branch  0 taken 201
branch  1 taken 1 (fallthrough)
      201:  106:        v.adaugaSfarsit(i);
      201:  106-block  0
call    0 returned 201
branch  1 taken 201 (fallthrough)
branch  2 taken 0 (throw)
        -:  107:    }
        -:  108:    //stergem valorile pare
        1:  109:    int i=0;
      202:  110:    while(i < v.dim()){
        1:  110-block  0
      202:  110-block  1
call    0 returned 202
branch  1 taken 202 (fallthrough)
branch  2 taken 0 (throw)
      202:  110-block  2
branch  3 taken 201
branch  4 taken 1 (fallthrough)
      201:  111:        TElem e = v.element(i);
      201:  111-block  0
call    0 returned 201
branch  1 taken 201 (fallthrough)
branch  2 taken 0 (throw)
      201:  112:        if (e % 2 ==0) //e par, sterg
      201:  112-block  0
branch  0 taken 101 (fallthrough)
branch  1 taken 100
      101:  113:            e = v.sterge(i);
      101:  113-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
      101:  113-block  1
        -:  114:        else
      100:  115:            i++;
      100:  115-block  0
        -:  116:    }
        -:  117:    //raman cele 100 elemente impare din intervalul [-100,100]
        -:  118:    //test iterator
        1:  119:    IteratorVectorDinamic iv = v.iterator();
        1:  119-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  120:    iv.prim();
        1:  120-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  121:    val = -99;
      101:  122:    while(iv.valid()){
        1:  122-block  0
      101:  122-block  1
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
      101:  122-block  2
branch  3 taken 100
branch  4 taken 1 (fallthrough)
      100:  123:        TElem e = iv.element();
      100:  123-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
     100*:  124:        assert(e == val);
      100:  124-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 100
    %%%%%:  124-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
      100:  124-block  2
    %%%%%:  124-block  3
      100:  125:        val += 2;
      100:  126:        iv.urmator();
      100:  126-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:  127:    }
        -:  128:    //test parcurgere
        1:  129:    val = -99;
      101:  130:    for(int i = 0; i < v.dim(); i++){
        1:  130-block  0
      101:  130-block  1
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
      101:  130-block  2
branch  3 taken 100
branch  4 taken 1 (fallthrough)
      100:  131:        TElem e = v.element(i);
      100:  131-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
     100*:  132:        assert(e == val);
      100:  132-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 100
    %%%%%:  132-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
      100:  132-block  2
    %%%%%:  132-block  3
      100:  133:        val += 2;
      100:  133-block  0
        -:  134:    }
        1:  135:}
        1:  135-block  0
call    0 returned 1
    $$$$$:  135-block  1
call    1 never executed
        -:  136:
function _Z12testIteratorv called 1 returned 100% blocks executed 79%
        1:  137:void testIterator() { // test iterator
        1:  138:    VectorDinamic v(10);
        1:  138-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:  139:    for (int i = 0; i < 9; i = i + 2) { //adaugam elemente din 2 in 2 (numere pare)
        1:  139-block  0
        5:  139-block  1
        6:  139-block  2
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  140:        v.adaugaSfarsit(i);
        5:  140-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:  141:    }
        1:  142:    IteratorVectorDinamic iv = v.iterator();
        1:  142-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  143:    assert(iv.valid() == true);
        1:  143-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  143-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  143-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  143-block  3
    %%%%%:  143-block  4
        1:  144:    iv.prim();
        1:  144-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  145:    int k = 0;
        6:  146:    while(iv.valid()){
        1:  146-block  0
        6:  146-block  1
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  146-block  2
branch  3 taken 5
branch  4 taken 1 (fallthrough)
        5:  147:        TElem e1 = iv.element();
        5:  147-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  148:        TElem e2 = v.element(k);
        5:  148-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
       5*:  149:        assert(e1 == e2);
        5:  149-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%:  149-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        5:  149-block  2
    %%%%%:  149-block  3
        5:  150:        iv.urmator();
        5:  150-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  151:        k++;
        5:  151-block  0
        -:  152:    }
        1:  153:}
        1:  153-block  0
call    0 returned 1
    $$$$$:  153-block  1
call    1 never executed
        -:  154:
function _Z12testQuantityv called 1 returned 100% blocks executed 75%
        1:  155:void testQuantity() {//scopul e sa adaugam multe date
        1:  156:    VectorDinamic v(100);
        1:  156-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
   200001:  157:    for (int i = 0; i < 200000 ; i++)
        1:  157-block  0
   200000:  157-block  1
   200001:  157-block  2
branch  0 taken 200000
branch  1 taken 1 (fallthrough)
   200000:  158:        v.adaugaSfarsit(i);
   200000:  158-block  0
call    0 returned 200000
branch  1 taken 200000 (fallthrough)
branch  2 taken 0 (throw)
       1*:  159:    assert(v.dim() == 200000);
        1:  159-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  159-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  159-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  159-block  3
    %%%%%:  159-block  4
        1:  160:    IteratorVectorDinamic iv = v.iterator();
        1:  160-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  161:    assert(iv.valid() == true);
        1:  161-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  161-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  161-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  161-block  3
    %%%%%:  161-block  4
   200001:  162:    for (int i = 0; i < v.dim(); i++) {
        1:  162-block  0
   200000:  162-block  1
   200001:  162-block  2
call    0 returned 200001
branch  1 taken 200001 (fallthrough)
branch  2 taken 0 (throw)
   200001:  162-block  3
branch  3 taken 200000
branch  4 taken 1 (fallthrough)
   200000:  163:        iv.urmator();
   200000:  163-block  0
call    0 returned 200000
branch  1 taken 200000 (fallthrough)
branch  2 taken 0 (throw)
        -:  164:    }
        1:  165:    iv.prim();
        1:  165-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  166:    int i=0;
   200001:  167:    while (iv.valid()) { //testam elementele returnate de iterator
        1:  167-block  0
   200001:  167-block  1
call    0 returned 200001
branch  1 taken 200001 (fallthrough)
branch  2 taken 0 (throw)
   200001:  167-block  2
branch  3 taken 200000
branch  4 taken 1 (fallthrough)
   200000:  168:        TElem e = iv.element();
   200000:  168-block  0
call    0 returned 200000
branch  1 taken 200000 (fallthrough)
branch  2 taken 0 (throw)
  200000*:  169:        assert(e == i);
   200000:  169-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 200000
    %%%%%:  169-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
   200000:  169-block  2
    %%%%%:  169-block  3
   200000:  170:        i++;
   200000:  171:        iv.urmator();
   200000:  171-block  0
call    0 returned 200000
branch  1 taken 200000 (fallthrough)
branch  2 taken 0 (throw)
        -:  172:    }
       1*:  173:    assert(iv.valid() == false);
        1:  173-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  173-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  173-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  173-block  3
    %%%%%:  173-block  4
        -:  174:    //stergem toate elementele, incepand de la final
   200001:  175:    for (int i = v.dim()-1; i >= 0; i--) {
        1:  175-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  175-block  1
   200000:  175-block  2
   200001:  175-block  3
branch  3 taken 200000
branch  4 taken 1 (fallthrough)
  200000*:  176:        assert(v.sterge(v.dim()-1)==i);
   200000:  176-block  0
call    0 returned 200000
branch  1 taken 200000 (fallthrough)
branch  2 taken 0 (throw)
   200000:  176-block  1
call    3 returned 200000
branch  4 taken 200000 (fallthrough)
branch  5 taken 0 (throw)
   200000:  176-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 200000
    %%%%%:  176-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
   200000:  176-block  4
    %%%%%:  176-block  5
        -:  177:    }
       1*:  178:    assert(v.dim() == 0);
        1:  178-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  178-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  178-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  178-block  3
    %%%%%:  178-block  4
        1:  179:}
        1:  179-block  0
call    0 returned 1
    $$$$$:  179-block  1
call    1 never executed
        -:  180:
function _Z12testExceptiiv called 1 returned 100% blocks executed 32%
        1:  181:void testExceptii() {
        1:  182:    VectorDinamic v(10);
        1:  182-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  183:    try {
        1:  184:        v.element(0);
        1:  184-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  185:    }
    =====:  186:    catch (exception&) {
    $$$$$:  186-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  186-block  1
call    2 never executed
        -:  187:        assert(true); //ar trebui sa arunce exceptie
    =====:  188:    }
call    0 never executed
        -:  189:    try {
        1:  190:        TElem e = v.sterge(1);
        1:  190-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  190-block  1
        -:  191:    }
    =====:  192:    catch (exception&) {
    $$$$$:  192-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  192-block  1
call    2 never executed
        -:  193:        assert(true); //ar trebui sa arunce exceptie
    =====:  194:    }
call    0 never executed
        -:  195:    try {
        1:  196:        v.modifica(0,1);
        1:  196-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  197:    }
    =====:  198:    catch (exception&) {
    $$$$$:  198-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  198-block  1
call    2 never executed
        -:  199:        assert(true); //ar trebui sa arunce exceptie
    =====:  200:    }
call    0 never executed
        -:  201:    try {
       1*:  202:        assert(v.dim()==0);
        1:  202-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  202-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  202-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  202-block  3
    %%%%%:  202-block  4
        -:  203:    }
    =====:  204:    catch (exception&) {
    $$$$$:  204-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  204-block  1
call    2 never executed
    =====:  205:        assert(false); //nu ar trebui sa arunce exceptie
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  206:    }
    $$$$$:  206-block  0
call    0 never executed
    $$$$$:  206-block  1
call    1 never executed
        1:  207:}
        1:  207-block  0
call    0 returned 1
    $$$$$:  207-block  1
call    1 never executed
        -:  208:
function _Z10testExtinsv called 1 returned 100% blocks executed 100%
        1:  209:void testExtins() {
        1:  210:    testCreeaza();
        1:  210-block  0
call    0 returned 1
        1:  211:    testAdauga();
call    0 returned 1
        1:  212:    testSterge();
call    0 returned 1
        1:  213:    testIterator();
call    0 returned 1
        1:  214:    testQuantity();
call    0 returned 1
        1:  215:    testExceptii();
call    0 returned 1
        1:  216:}
